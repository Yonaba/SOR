{"name":"Sor","tagline":"Library for solving linear equation system using Successive Over Relaxation method","google":"","body":"ï»¿#SOR : Linear Equation System Solver#\r\n*Successive Over Relaxation (SOR)* is a light-weight library for solving linear Equation Systems using a converging iterative process.<br/>\r\nIt is written in [Lua][].\r\n\r\n##Usage##\r\nPlace the file 'SOR.lua' inside your project, call it using *require*.\r\n    \r\n    local SOR = require (\"SOR\")\r\n\t\r\nNow assuming you have to solve this linear system of 16x16 (16 equations, 16 unknown variables).<br/>\r\nYou will have to create a 16x17 matrix representing that system, the 17th column beign the solution vector.\r\n\r\n    local matrix = {\r\n\t\t\t\t\t{-4,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-11},\r\n\t\t\t\t\t{1,-4,1,0,0,1,0,0,0,0,0,0,0,0,0,0,-3},\r\n\t\t\t\t\t{0,1,-4,1,0,0,1,0,0,0,0,0,0,0,0,0,-3},\r\n\t\t\t\t\t{0,0,1,-4,0,0,0,1,0,0,0,0,0,0,0,0,-11},\r\n\t\t\t\t\t{1,0,0,0,-4,1,0,0,1,0,0,0,0,0,0,0,-8},\r\n\t\t\t\t\t{0,1,0,0,1,-4,1,0,0,1,0,0,0,0,0,0,0},\r\n\t\t\t\t\t{0,0,1,0,0,1,-4,1,0,0,1,0,0,0,0,0,0},\r\n\t\t\t\t\t{0,0,0,1,0,0,1,-4,0,0,0,1,0,0,0,0,-8},\r\n\t\t\t\t\t{0,0,0,0,1,0,0,0,-4,1,0,0,1,0,0,0,-8},\r\n\t\t\t\t\t{0,0,0,0,0,1,0,0,1,-4,1,0,0,1,0,0,0},\r\n\t\t\t\t\t{0,0,0,0,0,0,1,0,0,1,-4,1,0,0,1,0,0},\r\n\t\t\t\t\t{0,0,0,0,0,0,0,1,0,0,1,-4,0,0,0,1,-8},\r\n\t\t\t\t\t{0,0,0,0,0,0,0,0,1,0,0,0,-4,1,0,0,-10},\r\n\t\t\t\t\t{0,0,0,0,0,0,0,0,0,1,0,0,1,-4,1,0,-2},\r\n\t\t\t\t\t{0,0,0,0,0,0,0,0,0,0,1,0,0,1,-4,1,-2},\r\n\t\t\t\t\t{0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,-4,-10},\r\n\t\t\t\t}\r\n\t\t\t\t\r\nTo solve this sytem, use *SOR.solve()*.\r\n\r\n    local x, iterations = SOR.solve(matrix)\r\n    -- displays x-vector:\r\n    for i,v in ipairs(x) do\r\n      print(('x[%d] = %f'):format(i,v))\r\n    end\r\n    print(('Iterations Made: %d'):format(iterations))\r\n\r\nThe output will be :\r\n\r\n    x[1] = 5.454459\r\n    x[2] = 4.594688\r\n    x[3] = 4.594679\r\n    x[4] = 5.454531\r\n    x[5] = 6.223469\r\n    x[6] = 5.329580\r\n    x[7] = 5.329561\r\n    x[8] = 6.223491\r\n    x[9] = 6.109833\r\n    x[10] = 5.170488\r\n    x[11] = 5.170455\r\n    x[12] = 6.109845\r\n    x[13] = 5.045460\r\n    x[14] = 4.071980\r\n    x[15] = 4.071964\r\n    x[16] = 5.045457\r\n    Iterations Made: 78\r\n\r\n##Note##\r\nConsider that, to have this working the input matrix , with the last column left out, must be [symmetric][] and [diagonally dominant][].<br/>\r\nOtherwise, the solver will throw an error.\r\n\r\n\r\n##Full documentation##\r\n\t\t\r\n* *SOR.setAccuracy(Acc)* : sets the solver accuracy. It has to be a tiny positive value, as the solver uses it a convergence criteria to stop iterations. By default, value used is 1E-6.\r\n* *SOR.getAccuracy()* : returns the accuracy.\r\n* *SOR.setMaxIterations(I)* : the maximum possible iterations allowed to find a solution. Default value is 1E4\r\n* *SOR.getMaxIterations* : return the number of maximum interations allowed.\r\n* *SOR.setRelaxation(W)* : value of the relaxation parameter. It has to be a number between 0 and 2, both excluded. By default,value 1.86 will be used.\r\n* *SOR.getRelaxation* : returns the value of the relaxation parameter.\r\n* *SOR.solve(Matrix)* : Returns a linear solution vector, plus the number of iterations made.\r\n\r\nYou can optionnally modify the solver behaviour before using *SOR.solve()* through these commands.\r\n\r\n##Useful links##\r\n*  [Wikipedia : Successive Over Relaxation][]\r\n  \r\n##License##\r\nThis work is under [MIT-LICENSE][]<br/>\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a\r\n    copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n    \r\n    The above copyright notice and this permission notice shall be included\r\n    in all copies or substantial portions of the Software.\r\n    \r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[Lua]: http://www.lua.org\r\n[Wikipedia : Successive Over Relaxation]: http://en.wikipedia.org/wiki/Successive_over-relaxation\r\n[symmetric]: http://en.wikipedia.org/wiki/Symmetric_matrix\r\n[diagonally dominant]: http://en.wikipedia.org/wiki/Diagonally_dominant_matrix\r\n[MIT-LICENSE]: http://www.opensource.org/licenses/mit-license.php","note":"Don't delete this file! It's used internally to help with page regeneration."}